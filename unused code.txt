##  Imports on Dashboard Home
                        <%- include('partials/mmr'); %>
                        <%- include('partials/welcome'); %>
                        <%- include('partials/vehicleInformation'); %>
                        <%- include('partials/employeeInformation'); %>
                        <%- include('partials/addVehicle'); %>
                        <%- include('partials/addDriver'); %>





## From Server.js

app.route(APP_DIRECTORY + "/fileUpload")
//   .post(async function (req, res) {
//     if (req.isAuthenticated()) {
//       if(allBrands.length<1){
//         cacheBrands();
//       }
//       var form = new formidable.IncomingForm();
//       form.parse(req, function (err, fields, files) {
//         let upload = files.elicsv;
//         let loaded = (fields.loaded) ? "Loaded" : false;
//         let attempted = (fields.attempted) ? "Attempted" : false;
//         let delivered = (fields.delivered) ? "Delivered" : false;
//         let extractFor = fields.extractFor;
//         // populateErrors = [];

//         let today = new Date;

//         if (extractFor != "print") {
//           let fileNamePrefix = (extractFor === "roadWarrior") ? "RW - " : "R4M - ";
//           let tempFileName = (fileNamePrefix + today.toDateString() + '_' + today.getHours() + '-' + today.getMinutes() + " " + req.user._id + '.xlsx').replace(/ /g, "_");
//           getData(upload.path, { loaded: loaded, attempted: attempted, delivered: delivered, extractFor: extractFor }).then(function (processedData) {            
//             let addresses = processedData.addresses;
//             let errors = processedData.errors;
//             let read = addresses.length;
//             console.log("actual read: " + read);
//             console.log("Records read: " + addresses.length);
//             // var populateResult;
//             if (extractFor === "roadWarrior") {
//               console.log("running for ROAD WARIOR");
//               populateExcelData(tempFileName, addresses).then((x) =>{
//                 res.render("excellDownload.ejs", {
//                   //uncomment fir local developement
//                   // filePath: tempFilePath  + tempFileName,
//                   // remote hosting version
//                   filePath: (SERVER? APP_DIRECTORY + "/": tempFilePath)  + tempFileName,
//                   body: new Body("Download", "", ""),
//                   errors: (errors) ? errors: null,
//                   user: req.user,
//                 });
//               });
//             } else {
//               console.log("running for ROUTE 4 ME");
//               // console.log("From after processed Data");
//               populateExcelDataRoute4Me(tempFileName, addresses).then((x)=>{
//                 // console.log("Inside Promise prinintg");
//                 // console.log(x);
//                 res.render("excellDownload.ejs", {
//                   //uncomment fir local developement
//                   // filePath: tempFilePath  + tempFileName,
//                   // remote hosting version
//                   filePath: (SERVER? APP_DIRECTORY + "/": tempFilePath)  + tempFileName,
//                   body: new Body("Download", "", ""),
//                   errors: (errors) ? errors: null,
//                   user: req.user,
//                 });
//               });

//             }
//           }).catch(err => {
//             console.log("Error Getting Data");
//             res.render("home.ejs", {
//             //uncomment fir local developement
//             // filePath: tempFilePath  + tempFileName,
//             // remote hosting version
//             filePath: "",
//             body: new Body("Download", "Error Getting Data: Try again and make sure you are uploading a .CSV file not an .XLS or XLSX file", ""),
//             errors: [{name:"", line: "Bad File Format", fullAddress: "Try again and make sure you are uploading a .CSV file not an .XLS or XLSX file"}],
//             user: req.user,
//           });
//         });
//         } else {
//           let tempFileName = (today.toDateString() + '_' + today.getHours() + '-' + today.getMinutes() + " -PRINT- " + req.user._id + '.xlsx').replace(/ /g, "_");
//           // console.log("extract for print");
//           getDataForPrint(upload.path, { loaded: loaded, attempted: attempted, extractFor: extractFor }).then(function (addresses) {
//             let userName = req.user.firstName + " " + req.user.lastName;
//             console.log("Records read: " + addresses.length);
//             // console.log(addresses);
//             // console.log(userName);
//             populateExcelDataForPrint(tempFileName, addresses, userName);
//             res.render("stopDisplay.ejs", {
//               filePath:  tempFilePath + tempFileName,
//               body: new Body("Pick First Stop", "", ""),
//               addresses: addresses,
//               user: req.user,
//             });
//           })
//         }

//       });
//     } else {
//       res.redirect(APP_DIRECTORY + "/");
//     }
//   })



app.route(APP_DIRECTORY + "/brandsFileUpload")
  .get(function (req, res){
    if (req.isAuthenticated() || req.hostname.includes("localhost") ) {
      // console.log(req.user.isProUser);
      let isProUser = (req.user)? req.user.isProUser : false;
      if(isProUser || req.hostname.includes("localhost")){
        // cacheBrands
        res.render("brandCapture.ejs", {
          body: new Body("Brands Upload - TCS", "", ""),
          allBrands: null,
          updates:null,
          newBrands:null,
          reportSummary:null,
          user: (req.user)? req.user : null,
        });
      }else{
        console.log("Unauthorized Access ");
        
        res.render("home.ejs", {
          body: new Body("Upload", "Admin Access Only", ""),
          user: req.user,
        });  
      }
    }else{
      console.log("Unauthenticated Request ");
      res.redirect("/");
    }
  })
  .post(function (req, res) {
    if (req.isAuthenticated() || req.hostname.includes("localhost")) {
      var form = new formidable.IncomingForm();
      form.parse(req, function (err, fields, files) {
        let upload = files.loadXLS;

        getBrandsFromExcelDocument(upload.path).then(async function (data) {
          // console.log(data);
          if (data != "Error Getting Data" ){
              if(data.brands.length > 0 ){
              let brands = data.brands;
              let report = data.report;
              let reportSummary = data.reportSummary;
              // console.log("Records read after promise: " + reportSummary.totalRead);
              // console.log("New Brands FOund: " + reportSummary.totalBrands);
              // console.log(reportSummary);
              // console.log(report);
              console.log("Checking for and Uploading New Brands ... ");
              // let newUpdates = [];
              // let newBrandsAdded = [];
              // let allBrandsFound = [];
              // var processedItem = 0;

              processBrandUpdates(brands).then(result => {
                // console.log(result);
                res.render("brandCapture.ejs", {
                  body: new Body("Brands Upload - LSAsistant", "", "Brand Updates Done"),
                  // allBrands: allBrandsFound,
                  updates: result.modifiedBrands,
                  newBrands: result.newBrands,
                  reportSummary: data.reportSummary,
                  report: report,
                  user: (req.user) ? req.user : null,
                });
                cacheBrands();
              }).catch(err => {
                console.log(err);
                res.render("brandCapture.ejs", {
                  body: new Body("Brands Upload", "Error Perfoming Update/Addition", ""),
                  allBrands: null,
                  updates: null,
                  newBrands: null,
                  reportSummary: data.reportSummary,
                  report: report,
                  user: (req.user) ? req.user : null,
                });
                cacheBrands();
              })
              
            }else{
              console.log("No New Brands or Uodates");
              res.render("brandCapture.ejs", {
              body: new Body("Brands Upload", "", ""),
              allBrands: null,
              updates: null,
              newBrands: null,
              reportSummary: data.reportSummary,
              report: data.report,
              user: (req.user) ? req.user : null,
            });
                cacheBrands();
            }
            
          }else{
            res.render("brandCapture.ejs", {
              body: new Body("Brands Upload", "Error Readidng Data", ""),
              allBrands: null,
              updates: null,
              newBrands: null,
              reportSummary: null,
              report: null,
              user: (req.user) ? req.user : null,
            });
          }
        });
      });
    }else{
      console.log("Unauthenticated Request ");
      res.redirect(APP_DIRECTORY + "/");
    }
  });




app.route(APP_DIRECTORY + "/delete")
  .post(function (req, res) {
    let path = req.body.path;
    console.log("File to be deleted: " + path);
    deleteFile(path);
    res.sendStatus(200);
  })

app.route(APP_DIRECTORY + "/profile")
  .get(function (req, res) {
    if (req.isAuthenticated()) {
      res.render("profile", { user: req.user, body: new Body("Account", "", "") });
    } else {
      res.redirect(APP_DIRECTORY + "/");
    }
  })


